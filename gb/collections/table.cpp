/* Generated by Cython 0.26.1 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_26_1"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX < 0x030700A0 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject **args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #ifdef __cplusplus
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough) || (defined(__GNUC__) && defined(__attribute__))
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__gb__collections__table
#define __PYX_HAVE_API__gb__collections__table
#include <stdint.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "gb/collections/table.pyx",
  "stringsource",
};

/*--- Type declarations ---*/
struct __pyx_obj_2gb_11collections_5table_Table;
struct __pyx_obj_2gb_11collections_5table_RobinHoodHash;
struct __pyx_t_2gb_11collections_5table_entry_t;
typedef struct __pyx_t_2gb_11collections_5table_entry_t __pyx_t_2gb_11collections_5table_entry_t;
struct __pyx_t_2gb_11collections_5table_rh_hash_t;
typedef struct __pyx_t_2gb_11collections_5table_rh_hash_t __pyx_t_2gb_11collections_5table_rh_hash_t;

/* "gb/collections/table.pxd":12
 * 
 * 
 * ctypedef struct entry_t:             # <<<<<<<<<<<<<<
 *     size_t key
 *     uint64_t value
 */
struct __pyx_t_2gb_11collections_5table_entry_t {
  size_t key;
  uint64_t value;
  size_t dib;
};

/* "gb/collections/table.pxd":18
 * 
 * 
 * ctypedef struct rh_hash_t:             # <<<<<<<<<<<<<<
 *     size_t inserted
 *     size_t n_to_prime
 */
struct __pyx_t_2gb_11collections_5table_rh_hash_t {
  size_t inserted;
  size_t n_to_prime;
  size_t capacity;
  double load_factor;
  __pyx_t_2gb_11collections_5table_entry_t *data;
};

/* "gb/collections/table.pxd":26
 * 
 * 
 * cdef class Table(object):             # <<<<<<<<<<<<<<
 *     cdef rh_hash_t *rows
 *     cdef size_t n_rows
 */
struct __pyx_obj_2gb_11collections_5table_Table {
  PyObject_HEAD
  struct __pyx_vtabstruct_2gb_11collections_5table_Table *__pyx_vtab;
  __pyx_t_2gb_11collections_5table_rh_hash_t *rows;
  size_t n_rows;
};


/* "gb/collections/table.pxd":34
 * 
 * 
 * cdef class RobinHoodHash(object):             # <<<<<<<<<<<<<<
 *     cdef rh_hash_t *table
 * 
 */
struct __pyx_obj_2gb_11collections_5table_RobinHoodHash {
  PyObject_HEAD
  struct __pyx_vtabstruct_2gb_11collections_5table_RobinHoodHash *__pyx_vtab;
  __pyx_t_2gb_11collections_5table_rh_hash_t *table;
};



/* "gb/collections/table.pyx":129
 * 
 * 
 * cdef class Table(object):             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, size_t n_rows, double load_factor=0.95):
 */

struct __pyx_vtabstruct_2gb_11collections_5table_Table {
  void (*set_cell)(struct __pyx_obj_2gb_11collections_5table_Table *, size_t, size_t, uint64_t);
  uint64_t (*get_cell)(struct __pyx_obj_2gb_11collections_5table_Table *, size_t, size_t);
};
static struct __pyx_vtabstruct_2gb_11collections_5table_Table *__pyx_vtabptr_2gb_11collections_5table_Table;


/* "gb/collections/table.pyx":161
 * 
 * 
 * cdef class RobinHoodHash(object):             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, double load_factor=0.95):
 */

struct __pyx_vtabstruct_2gb_11collections_5table_RobinHoodHash {
  void (*set)(struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *, size_t, uint64_t);
  uint64_t (*get)(struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *, size_t);
  size_t (*size)(struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *);
};
static struct __pyx_vtabstruct_2gb_11collections_5table_RobinHoodHash *__pyx_vtabptr_2gb_11collections_5table_RobinHoodHash;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* CLineInTraceback.proto */
static int __Pyx_CLineForTraceback(int c_line);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static uint64_t __pyx_f_2gb_11collections_5table_5Table_get_cell(struct __pyx_obj_2gb_11collections_5table_Table *__pyx_v_self, size_t __pyx_v_row, size_t __pyx_v_col); /* proto*/
static void __pyx_f_2gb_11collections_5table_5Table_set_cell(struct __pyx_obj_2gb_11collections_5table_Table *__pyx_v_self, size_t __pyx_v_row, size_t __pyx_v_col, uint64_t __pyx_v_value); /* proto*/
static void __pyx_f_2gb_11collections_5table_13RobinHoodHash_set(struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *__pyx_v_self, size_t __pyx_v_key, uint64_t __pyx_v_value); /* proto*/
static uint64_t __pyx_f_2gb_11collections_5table_13RobinHoodHash_get(struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *__pyx_v_self, size_t __pyx_v_key); /* proto*/
static size_t __pyx_f_2gb_11collections_5table_13RobinHoodHash_size(struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *__pyx_v_self); /* proto*/

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'gb.collections.table' */
static PyTypeObject *__pyx_ptype_2gb_11collections_5table_Table = 0;
static PyTypeObject *__pyx_ptype_2gb_11collections_5table_RobinHoodHash = 0;
static CYTHON_INLINE size_t __pyx_f_2gb_11collections_5table_so_hash(size_t); /*proto*/
static CYTHON_INLINE size_t __pyx_f_2gb_11collections_5table_prime_by_n(size_t); /*proto*/
static void __pyx_f_2gb_11collections_5table_rh_resize(__pyx_t_2gb_11collections_5table_rh_hash_t *, size_t); /*proto*/
static void __pyx_f_2gb_11collections_5table_rh_init(__pyx_t_2gb_11collections_5table_rh_hash_t *, double); /*proto*/
static void __pyx_f_2gb_11collections_5table_rh_set(__pyx_t_2gb_11collections_5table_rh_hash_t *, size_t, uint64_t); /*proto*/
static uint64_t __pyx_f_2gb_11collections_5table_rh_get(__pyx_t_2gb_11collections_5table_rh_hash_t *, size_t); /*proto*/
static size_t __pyx_f_2gb_11collections_5table_rh_size(__pyx_t_2gb_11collections_5table_rh_hash_t *); /*proto*/
#define __Pyx_MODULE_NAME "gb.collections.table"
int __pyx_module_is_main_gb__collections__table = 0;

/* Implementation of 'gb.collections.table' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_TypeError;
static const char __pyx_k_col[] = "col";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_row[] = "row";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_n_rows[] = "n_rows";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_load_factor[] = "load_factor";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_Robin_Hash_out_of_mem[] = "Robin Hash out of mem";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_s_Robin_Hash_out_of_mem;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_col;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_load_factor;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_n_rows;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_row;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_value;
static int __pyx_pf_2gb_11collections_5table_5Table___cinit__(struct __pyx_obj_2gb_11collections_5table_Table *__pyx_v_self, size_t __pyx_v_n_rows, double __pyx_v_load_factor); /* proto */
static void __pyx_pf_2gb_11collections_5table_5Table_2__dealloc__(struct __pyx_obj_2gb_11collections_5table_Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2gb_11collections_5table_5Table_4_get_cell(struct __pyx_obj_2gb_11collections_5table_Table *__pyx_v_self, size_t __pyx_v_row, size_t __pyx_v_col); /* proto */
static PyObject *__pyx_pf_2gb_11collections_5table_5Table_6_set_cell(struct __pyx_obj_2gb_11collections_5table_Table *__pyx_v_self, size_t __pyx_v_row, size_t __pyx_v_col, uint64_t __pyx_v_value); /* proto */
static PyObject *__pyx_pf_2gb_11collections_5table_5Table_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_2gb_11collections_5table_Table *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2gb_11collections_5table_5Table_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_2gb_11collections_5table_Table *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_2gb_11collections_5table_13RobinHoodHash___cinit__(struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *__pyx_v_self, double __pyx_v_load_factor); /* proto */
static void __pyx_pf_2gb_11collections_5table_13RobinHoodHash_2__dealloc__(struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2gb_11collections_5table_13RobinHoodHash_4_get(struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *__pyx_v_self, size_t __pyx_v_key); /* proto */
static PyObject *__pyx_pf_2gb_11collections_5table_13RobinHoodHash_6_set(struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *__pyx_v_self, size_t __pyx_v_key, size_t __pyx_v_value); /* proto */
static PyObject *__pyx_pf_2gb_11collections_5table_13RobinHoodHash_8_size(struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2gb_11collections_5table_13RobinHoodHash_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2gb_11collections_5table_13RobinHoodHash_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_2gb_11collections_5table_Table(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_2gb_11collections_5table_RobinHoodHash(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;

/* "gb/collections/table.pyx":22
 * # Decent enough hash function from Stack Overflow
 * # Author is Thomas Mueller
 * cdef inline size_t so_hash(size_t x) nogil:             # <<<<<<<<<<<<<<
 *     x = (x ^ (x >> 30)) * <size_t>(0xbf58476d1ce4e5b9)
 *     x = (x ^ (x >> 27)) * <size_t>(0x94d049bb133111eb)
 */

static CYTHON_INLINE size_t __pyx_f_2gb_11collections_5table_so_hash(size_t __pyx_v_x) {
  size_t __pyx_r;

  /* "gb/collections/table.pyx":23
 * # Author is Thomas Mueller
 * cdef inline size_t so_hash(size_t x) nogil:
 *     x = (x ^ (x >> 30)) * <size_t>(0xbf58476d1ce4e5b9)             # <<<<<<<<<<<<<<
 *     x = (x ^ (x >> 27)) * <size_t>(0x94d049bb133111eb)
 *     x = x ^ (x >> 31)
 */
  __pyx_v_x = ((__pyx_v_x ^ (__pyx_v_x >> 30)) * ((size_t)0xbf58476d1ce4e5b9));

  /* "gb/collections/table.pyx":24
 * cdef inline size_t so_hash(size_t x) nogil:
 *     x = (x ^ (x >> 30)) * <size_t>(0xbf58476d1ce4e5b9)
 *     x = (x ^ (x >> 27)) * <size_t>(0x94d049bb133111eb)             # <<<<<<<<<<<<<<
 *     x = x ^ (x >> 31)
 *     return x
 */
  __pyx_v_x = ((__pyx_v_x ^ (__pyx_v_x >> 27)) * ((size_t)0x94d049bb133111eb));

  /* "gb/collections/table.pyx":25
 *     x = (x ^ (x >> 30)) * <size_t>(0xbf58476d1ce4e5b9)
 *     x = (x ^ (x >> 27)) * <size_t>(0x94d049bb133111eb)
 *     x = x ^ (x >> 31)             # <<<<<<<<<<<<<<
 *     return x
 * 
 */
  __pyx_v_x = (__pyx_v_x ^ (__pyx_v_x >> 31));

  /* "gb/collections/table.pyx":26
 *     x = (x ^ (x >> 27)) * <size_t>(0x94d049bb133111eb)
 *     x = x ^ (x >> 31)
 *     return x             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_x;
  goto __pyx_L0;

  /* "gb/collections/table.pyx":22
 * # Decent enough hash function from Stack Overflow
 * # Author is Thomas Mueller
 * cdef inline size_t so_hash(size_t x) nogil:             # <<<<<<<<<<<<<<
 *     x = (x ^ (x >> 30)) * <size_t>(0xbf58476d1ce4e5b9)
 *     x = (x ^ (x >> 27)) * <size_t>(0x94d049bb133111eb)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "gb/collections/table.pyx":29
 * 
 * 
 * cdef inline size_t prime_by_n(size_t n) nogil:             # <<<<<<<<<<<<<<
 *     return 5 * (n * n + n) + 1
 * 
 */

static CYTHON_INLINE size_t __pyx_f_2gb_11collections_5table_prime_by_n(size_t __pyx_v_n) {
  size_t __pyx_r;

  /* "gb/collections/table.pyx":30
 * 
 * cdef inline size_t prime_by_n(size_t n) nogil:
 *     return 5 * (n * n + n) + 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((5 * ((__pyx_v_n * __pyx_v_n) + __pyx_v_n)) + 1);
  goto __pyx_L0;

  /* "gb/collections/table.pyx":29
 * 
 * 
 * cdef inline size_t prime_by_n(size_t n) nogil:             # <<<<<<<<<<<<<<
 *     return 5 * (n * n + n) + 1
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "gb/collections/table.pyx":33
 * 
 * 
 * cdef void rh_resize(rh_hash_t *table, size_t new_size) nogil:             # <<<<<<<<<<<<<<
 *     cdef entry_t *copy = NULL
 *     if table.data == NULL:
 */

static void __pyx_f_2gb_11collections_5table_rh_resize(__pyx_t_2gb_11collections_5table_rh_hash_t *__pyx_v_table, size_t __pyx_v_new_size) {
  __pyx_t_2gb_11collections_5table_entry_t *__pyx_v_copy;
  __pyx_t_2gb_11collections_5table_entry_t __pyx_v_entry;
  size_t __pyx_v_i;
  size_t __pyx_v_old_size;
  int __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;

  /* "gb/collections/table.pyx":34
 * 
 * cdef void rh_resize(rh_hash_t *table, size_t new_size) nogil:
 *     cdef entry_t *copy = NULL             # <<<<<<<<<<<<<<
 *     if table.data == NULL:
 *         table.data = <entry_t *> malloc(new_size*sizeof(entry_t))
 */
  __pyx_v_copy = NULL;

  /* "gb/collections/table.pyx":35
 * cdef void rh_resize(rh_hash_t *table, size_t new_size) nogil:
 *     cdef entry_t *copy = NULL
 *     if table.data == NULL:             # <<<<<<<<<<<<<<
 *         table.data = <entry_t *> malloc(new_size*sizeof(entry_t))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_table->data == NULL) != 0);
  if (__pyx_t_1) {

    /* "gb/collections/table.pyx":36
 *     cdef entry_t *copy = NULL
 *     if table.data == NULL:
 *         table.data = <entry_t *> malloc(new_size*sizeof(entry_t))             # <<<<<<<<<<<<<<
 *     else:
 *         copy = <entry_t *> malloc(table.capacity * sizeof(entry_t))
 */
    __pyx_v_table->data = ((__pyx_t_2gb_11collections_5table_entry_t *)malloc((__pyx_v_new_size * (sizeof(__pyx_t_2gb_11collections_5table_entry_t)))));

    /* "gb/collections/table.pyx":35
 * cdef void rh_resize(rh_hash_t *table, size_t new_size) nogil:
 *     cdef entry_t *copy = NULL
 *     if table.data == NULL:             # <<<<<<<<<<<<<<
 *         table.data = <entry_t *> malloc(new_size*sizeof(entry_t))
 *     else:
 */
    goto __pyx_L3;
  }

  /* "gb/collections/table.pyx":38
 *         table.data = <entry_t *> malloc(new_size*sizeof(entry_t))
 *     else:
 *         copy = <entry_t *> malloc(table.capacity * sizeof(entry_t))             # <<<<<<<<<<<<<<
 *         if copy == NULL:
 *             printf("[gb] memory error!\n")
 */
  /*else*/ {
    __pyx_v_copy = ((__pyx_t_2gb_11collections_5table_entry_t *)malloc((__pyx_v_table->capacity * (sizeof(__pyx_t_2gb_11collections_5table_entry_t)))));

    /* "gb/collections/table.pyx":39
 *     else:
 *         copy = <entry_t *> malloc(table.capacity * sizeof(entry_t))
 *         if copy == NULL:             # <<<<<<<<<<<<<<
 *             printf("[gb] memory error!\n")
 *             abort()
 */
    __pyx_t_1 = ((__pyx_v_copy == NULL) != 0);
    if (__pyx_t_1) {

      /* "gb/collections/table.pyx":40
 *         copy = <entry_t *> malloc(table.capacity * sizeof(entry_t))
 *         if copy == NULL:
 *             printf("[gb] memory error!\n")             # <<<<<<<<<<<<<<
 *             abort()
 *         memcpy(copy, table.data, table.capacity * sizeof(entry_t))
 */
      printf(((char const *)"[gb] memory error!\n"));

      /* "gb/collections/table.pyx":41
 *         if copy == NULL:
 *             printf("[gb] memory error!\n")
 *             abort()             # <<<<<<<<<<<<<<
 *         memcpy(copy, table.data, table.capacity * sizeof(entry_t))
 *         table.data = <entry_t *> realloc(table.data, new_size*sizeof(entry_t))
 */
      abort();

      /* "gb/collections/table.pyx":39
 *     else:
 *         copy = <entry_t *> malloc(table.capacity * sizeof(entry_t))
 *         if copy == NULL:             # <<<<<<<<<<<<<<
 *             printf("[gb] memory error!\n")
 *             abort()
 */
    }

    /* "gb/collections/table.pyx":42
 *             printf("[gb] memory error!\n")
 *             abort()
 *         memcpy(copy, table.data, table.capacity * sizeof(entry_t))             # <<<<<<<<<<<<<<
 *         table.data = <entry_t *> realloc(table.data, new_size*sizeof(entry_t))
 * 
 */
    memcpy(__pyx_v_copy, __pyx_v_table->data, (__pyx_v_table->capacity * (sizeof(__pyx_t_2gb_11collections_5table_entry_t))));

    /* "gb/collections/table.pyx":43
 *             abort()
 *         memcpy(copy, table.data, table.capacity * sizeof(entry_t))
 *         table.data = <entry_t *> realloc(table.data, new_size*sizeof(entry_t))             # <<<<<<<<<<<<<<
 * 
 *     if table.data == NULL:
 */
    __pyx_v_table->data = ((__pyx_t_2gb_11collections_5table_entry_t *)realloc(__pyx_v_table->data, (__pyx_v_new_size * (sizeof(__pyx_t_2gb_11collections_5table_entry_t)))));
  }
  __pyx_L3:;

  /* "gb/collections/table.pyx":45
 *         table.data = <entry_t *> realloc(table.data, new_size*sizeof(entry_t))
 * 
 *     if table.data == NULL:             # <<<<<<<<<<<<<<
 *         printf("[gb] memory error!\n")
 *         abort()
 */
  __pyx_t_1 = ((__pyx_v_table->data == NULL) != 0);
  if (__pyx_t_1) {

    /* "gb/collections/table.pyx":46
 * 
 *     if table.data == NULL:
 *         printf("[gb] memory error!\n")             # <<<<<<<<<<<<<<
 *         abort()
 * 
 */
    printf(((char const *)"[gb] memory error!\n"));

    /* "gb/collections/table.pyx":47
 *     if table.data == NULL:
 *         printf("[gb] memory error!\n")
 *         abort()             # <<<<<<<<<<<<<<
 * 
 *     memset(table.data, 0, new_size * sizeof(entry_t))
 */
    abort();

    /* "gb/collections/table.pyx":45
 *         table.data = <entry_t *> realloc(table.data, new_size*sizeof(entry_t))
 * 
 *     if table.data == NULL:             # <<<<<<<<<<<<<<
 *         printf("[gb] memory error!\n")
 *         abort()
 */
  }

  /* "gb/collections/table.pyx":49
 *         abort()
 * 
 *     memset(table.data, 0, new_size * sizeof(entry_t))             # <<<<<<<<<<<<<<
 * 
 *     cdef entry_t entry
 */
  memset(__pyx_v_table->data, 0, (__pyx_v_new_size * (sizeof(__pyx_t_2gb_11collections_5table_entry_t))));

  /* "gb/collections/table.pyx":53
 *     cdef entry_t entry
 *     cdef size_t i
 *     cdef size_t old_size = table.capacity             # <<<<<<<<<<<<<<
 *     table.inserted = 0
 *     table.capacity = new_size
 */
  __pyx_t_2 = __pyx_v_table->capacity;
  __pyx_v_old_size = __pyx_t_2;

  /* "gb/collections/table.pyx":54
 *     cdef size_t i
 *     cdef size_t old_size = table.capacity
 *     table.inserted = 0             # <<<<<<<<<<<<<<
 *     table.capacity = new_size
 *     if copy != NULL:
 */
  __pyx_v_table->inserted = 0;

  /* "gb/collections/table.pyx":55
 *     cdef size_t old_size = table.capacity
 *     table.inserted = 0
 *     table.capacity = new_size             # <<<<<<<<<<<<<<
 *     if copy != NULL:
 *         for i in range(old_size):
 */
  __pyx_v_table->capacity = __pyx_v_new_size;

  /* "gb/collections/table.pyx":56
 *     table.inserted = 0
 *     table.capacity = new_size
 *     if copy != NULL:             # <<<<<<<<<<<<<<
 *         for i in range(old_size):
 *             entry = copy[i]
 */
  __pyx_t_1 = ((__pyx_v_copy != NULL) != 0);
  if (__pyx_t_1) {

    /* "gb/collections/table.pyx":57
 *     table.capacity = new_size
 *     if copy != NULL:
 *         for i in range(old_size):             # <<<<<<<<<<<<<<
 *             entry = copy[i]
 *             if entry.key == 0:
 */
    __pyx_t_2 = __pyx_v_old_size;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "gb/collections/table.pyx":58
 *     if copy != NULL:
 *         for i in range(old_size):
 *             entry = copy[i]             # <<<<<<<<<<<<<<
 *             if entry.key == 0:
 *                 continue
 */
      __pyx_v_entry = (__pyx_v_copy[__pyx_v_i]);

      /* "gb/collections/table.pyx":59
 *         for i in range(old_size):
 *             entry = copy[i]
 *             if entry.key == 0:             # <<<<<<<<<<<<<<
 *                 continue
 *             rh_set(table, entry.key - 1, entry.value)
 */
      __pyx_t_1 = ((__pyx_v_entry.key == 0) != 0);
      if (__pyx_t_1) {

        /* "gb/collections/table.pyx":60
 *             entry = copy[i]
 *             if entry.key == 0:
 *                 continue             # <<<<<<<<<<<<<<
 *             rh_set(table, entry.key - 1, entry.value)
 *         free(copy)
 */
        goto __pyx_L7_continue;

        /* "gb/collections/table.pyx":59
 *         for i in range(old_size):
 *             entry = copy[i]
 *             if entry.key == 0:             # <<<<<<<<<<<<<<
 *                 continue
 *             rh_set(table, entry.key - 1, entry.value)
 */
      }

      /* "gb/collections/table.pyx":61
 *             if entry.key == 0:
 *                 continue
 *             rh_set(table, entry.key - 1, entry.value)             # <<<<<<<<<<<<<<
 *         free(copy)
 * 
 */
      __pyx_f_2gb_11collections_5table_rh_set(__pyx_v_table, (__pyx_v_entry.key - 1), __pyx_v_entry.value);
      __pyx_L7_continue:;
    }

    /* "gb/collections/table.pyx":62
 *                 continue
 *             rh_set(table, entry.key - 1, entry.value)
 *         free(copy)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    free(__pyx_v_copy);

    /* "gb/collections/table.pyx":56
 *     table.inserted = 0
 *     table.capacity = new_size
 *     if copy != NULL:             # <<<<<<<<<<<<<<
 *         for i in range(old_size):
 *             entry = copy[i]
 */
  }

  /* "gb/collections/table.pyx":33
 * 
 * 
 * cdef void rh_resize(rh_hash_t *table, size_t new_size) nogil:             # <<<<<<<<<<<<<<
 *     cdef entry_t *copy = NULL
 *     if table.data == NULL:
 */

  /* function exit code */
}

/* "gb/collections/table.pyx":65
 * 
 * 
 * cdef void rh_init(rh_hash_t *table, double load_factor) nogil:             # <<<<<<<<<<<<<<
 *     table.inserted = 0
 *     table.n_to_prime = 1
 */

static void __pyx_f_2gb_11collections_5table_rh_init(__pyx_t_2gb_11collections_5table_rh_hash_t *__pyx_v_table, double __pyx_v_load_factor) {

  /* "gb/collections/table.pyx":66
 * 
 * cdef void rh_init(rh_hash_t *table, double load_factor) nogil:
 *     table.inserted = 0             # <<<<<<<<<<<<<<
 *     table.n_to_prime = 1
 *     table.load_factor = load_factor
 */
  __pyx_v_table->inserted = 0;

  /* "gb/collections/table.pyx":67
 * cdef void rh_init(rh_hash_t *table, double load_factor) nogil:
 *     table.inserted = 0
 *     table.n_to_prime = 1             # <<<<<<<<<<<<<<
 *     table.load_factor = load_factor
 *     table.data = NULL
 */
  __pyx_v_table->n_to_prime = 1;

  /* "gb/collections/table.pyx":68
 *     table.inserted = 0
 *     table.n_to_prime = 1
 *     table.load_factor = load_factor             # <<<<<<<<<<<<<<
 *     table.data = NULL
 *     rh_resize(table, prime_by_n(table.n_to_prime))
 */
  __pyx_v_table->load_factor = __pyx_v_load_factor;

  /* "gb/collections/table.pyx":69
 *     table.n_to_prime = 1
 *     table.load_factor = load_factor
 *     table.data = NULL             # <<<<<<<<<<<<<<
 *     rh_resize(table, prime_by_n(table.n_to_prime))
 * 
 */
  __pyx_v_table->data = NULL;

  /* "gb/collections/table.pyx":70
 *     table.load_factor = load_factor
 *     table.data = NULL
 *     rh_resize(table, prime_by_n(table.n_to_prime))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_f_2gb_11collections_5table_rh_resize(__pyx_v_table, __pyx_f_2gb_11collections_5table_prime_by_n(__pyx_v_table->n_to_prime));

  /* "gb/collections/table.pyx":65
 * 
 * 
 * cdef void rh_init(rh_hash_t *table, double load_factor) nogil:             # <<<<<<<<<<<<<<
 *     table.inserted = 0
 *     table.n_to_prime = 1
 */

  /* function exit code */
}

/* "gb/collections/table.pyx":73
 * 
 * 
 * cdef void rh_set(rh_hash_t *table, size_t key, uint64_t value) nogil:             # <<<<<<<<<<<<<<
 *     cdef size_t kp1 = key + 1
 *     cdef size_t h = so_hash(kp1)
 */

static void __pyx_f_2gb_11collections_5table_rh_set(__pyx_t_2gb_11collections_5table_rh_hash_t *__pyx_v_table, size_t __pyx_v_key, uint64_t __pyx_v_value) {
  size_t __pyx_v_kp1;
  size_t __pyx_v_h;
  __pyx_t_2gb_11collections_5table_entry_t __pyx_v_entry;
  __pyx_t_2gb_11collections_5table_entry_t __pyx_v_tmp;
  size_t __pyx_v_loc;
  size_t __pyx_v_i;
  double __pyx_v_load;
  size_t __pyx_v_new_n;
  int __pyx_t_1;

  /* "gb/collections/table.pyx":74
 * 
 * cdef void rh_set(rh_hash_t *table, size_t key, uint64_t value) nogil:
 *     cdef size_t kp1 = key + 1             # <<<<<<<<<<<<<<
 *     cdef size_t h = so_hash(kp1)
 * 
 */
  __pyx_v_kp1 = (__pyx_v_key + 1);

  /* "gb/collections/table.pyx":75
 * cdef void rh_set(rh_hash_t *table, size_t key, uint64_t value) nogil:
 *     cdef size_t kp1 = key + 1
 *     cdef size_t h = so_hash(kp1)             # <<<<<<<<<<<<<<
 * 
 *     cdef entry_t entry, tmp
 */
  __pyx_v_h = __pyx_f_2gb_11collections_5table_so_hash(__pyx_v_kp1);

  /* "gb/collections/table.pyx":78
 * 
 *     cdef entry_t entry, tmp
 *     entry.key = kp1             # <<<<<<<<<<<<<<
 *     entry.value = value
 *     entry.dib = 0
 */
  __pyx_v_entry.key = __pyx_v_kp1;

  /* "gb/collections/table.pyx":79
 *     cdef entry_t entry, tmp
 *     entry.key = kp1
 *     entry.value = value             # <<<<<<<<<<<<<<
 *     entry.dib = 0
 * 
 */
  __pyx_v_entry.value = __pyx_v_value;

  /* "gb/collections/table.pyx":80
 *     entry.key = kp1
 *     entry.value = value
 *     entry.dib = 0             # <<<<<<<<<<<<<<
 * 
 *     cdef size_t loc
 */
  __pyx_v_entry.dib = 0;

  /* "gb/collections/table.pyx":83
 * 
 *     cdef size_t loc
 *     cdef size_t i = 0             # <<<<<<<<<<<<<<
 *     table.inserted += 1
 *     while True:
 */
  __pyx_v_i = 0;

  /* "gb/collections/table.pyx":84
 *     cdef size_t loc
 *     cdef size_t i = 0
 *     table.inserted += 1             # <<<<<<<<<<<<<<
 *     while True:
 *         loc = (h + i) % table.capacity
 */
  __pyx_v_table->inserted = (__pyx_v_table->inserted + 1);

  /* "gb/collections/table.pyx":85
 *     cdef size_t i = 0
 *     table.inserted += 1
 *     while True:             # <<<<<<<<<<<<<<
 *         loc = (h + i) % table.capacity
 *         if table.data[loc].key == 0:
 */
  while (1) {

    /* "gb/collections/table.pyx":86
 *     table.inserted += 1
 *     while True:
 *         loc = (h + i) % table.capacity             # <<<<<<<<<<<<<<
 *         if table.data[loc].key == 0:
 *             table.data[loc] = entry
 */
    __pyx_v_loc = ((__pyx_v_h + __pyx_v_i) % __pyx_v_table->capacity);

    /* "gb/collections/table.pyx":87
 *     while True:
 *         loc = (h + i) % table.capacity
 *         if table.data[loc].key == 0:             # <<<<<<<<<<<<<<
 *             table.data[loc] = entry
 *             break
 */
    __pyx_t_1 = (((__pyx_v_table->data[__pyx_v_loc]).key == 0) != 0);
    if (__pyx_t_1) {

      /* "gb/collections/table.pyx":88
 *         loc = (h + i) % table.capacity
 *         if table.data[loc].key == 0:
 *             table.data[loc] = entry             # <<<<<<<<<<<<<<
 *             break
 *         elif table.data[loc].key == kp1:
 */
      (__pyx_v_table->data[__pyx_v_loc]) = __pyx_v_entry;

      /* "gb/collections/table.pyx":89
 *         if table.data[loc].key == 0:
 *             table.data[loc] = entry
 *             break             # <<<<<<<<<<<<<<
 *         elif table.data[loc].key == kp1:
 *             table.data[loc].value = value
 */
      goto __pyx_L4_break;

      /* "gb/collections/table.pyx":87
 *     while True:
 *         loc = (h + i) % table.capacity
 *         if table.data[loc].key == 0:             # <<<<<<<<<<<<<<
 *             table.data[loc] = entry
 *             break
 */
    }

    /* "gb/collections/table.pyx":90
 *             table.data[loc] = entry
 *             break
 *         elif table.data[loc].key == kp1:             # <<<<<<<<<<<<<<
 *             table.data[loc].value = value
 *             table.inserted -= 1
 */
    __pyx_t_1 = (((__pyx_v_table->data[__pyx_v_loc]).key == __pyx_v_kp1) != 0);
    if (__pyx_t_1) {

      /* "gb/collections/table.pyx":91
 *             break
 *         elif table.data[loc].key == kp1:
 *             table.data[loc].value = value             # <<<<<<<<<<<<<<
 *             table.inserted -= 1
 *             break
 */
      (__pyx_v_table->data[__pyx_v_loc]).value = __pyx_v_value;

      /* "gb/collections/table.pyx":92
 *         elif table.data[loc].key == kp1:
 *             table.data[loc].value = value
 *             table.inserted -= 1             # <<<<<<<<<<<<<<
 *             break
 *         elif table.data[loc].dib < entry.dib:
 */
      __pyx_v_table->inserted = (__pyx_v_table->inserted - 1);

      /* "gb/collections/table.pyx":93
 *             table.data[loc].value = value
 *             table.inserted -= 1
 *             break             # <<<<<<<<<<<<<<
 *         elif table.data[loc].dib < entry.dib:
 *             tmp = table.data[loc]
 */
      goto __pyx_L4_break;

      /* "gb/collections/table.pyx":90
 *             table.data[loc] = entry
 *             break
 *         elif table.data[loc].key == kp1:             # <<<<<<<<<<<<<<
 *             table.data[loc].value = value
 *             table.inserted -= 1
 */
    }

    /* "gb/collections/table.pyx":94
 *             table.inserted -= 1
 *             break
 *         elif table.data[loc].dib < entry.dib:             # <<<<<<<<<<<<<<
 *             tmp = table.data[loc]
 *             table.data[loc] = entry
 */
    __pyx_t_1 = (((__pyx_v_table->data[__pyx_v_loc]).dib < __pyx_v_entry.dib) != 0);
    if (__pyx_t_1) {

      /* "gb/collections/table.pyx":95
 *             break
 *         elif table.data[loc].dib < entry.dib:
 *             tmp = table.data[loc]             # <<<<<<<<<<<<<<
 *             table.data[loc] = entry
 *             entry = tmp
 */
      __pyx_v_tmp = (__pyx_v_table->data[__pyx_v_loc]);

      /* "gb/collections/table.pyx":96
 *         elif table.data[loc].dib < entry.dib:
 *             tmp = table.data[loc]
 *             table.data[loc] = entry             # <<<<<<<<<<<<<<
 *             entry = tmp
 *         entry.dib += 1
 */
      (__pyx_v_table->data[__pyx_v_loc]) = __pyx_v_entry;

      /* "gb/collections/table.pyx":97
 *             tmp = table.data[loc]
 *             table.data[loc] = entry
 *             entry = tmp             # <<<<<<<<<<<<<<
 *         entry.dib += 1
 *         i += 1
 */
      __pyx_v_entry = __pyx_v_tmp;

      /* "gb/collections/table.pyx":94
 *             table.inserted -= 1
 *             break
 *         elif table.data[loc].dib < entry.dib:             # <<<<<<<<<<<<<<
 *             tmp = table.data[loc]
 *             table.data[loc] = entry
 */
    }

    /* "gb/collections/table.pyx":98
 *             table.data[loc] = entry
 *             entry = tmp
 *         entry.dib += 1             # <<<<<<<<<<<<<<
 *         i += 1
 * 
 */
    __pyx_v_entry.dib = (__pyx_v_entry.dib + 1);

    /* "gb/collections/table.pyx":99
 *             entry = tmp
 *         entry.dib += 1
 *         i += 1             # <<<<<<<<<<<<<<
 * 
 *     cdef double load = (<double>table.inserted) / table.capacity
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }
  __pyx_L4_break:;

  /* "gb/collections/table.pyx":101
 *         i += 1
 * 
 *     cdef double load = (<double>table.inserted) / table.capacity             # <<<<<<<<<<<<<<
 *     cdef size_t new_n
 *     if load > table.load_factor:
 */
  __pyx_v_load = (((double)__pyx_v_table->inserted) / __pyx_v_table->capacity);

  /* "gb/collections/table.pyx":103
 *     cdef double load = (<double>table.inserted) / table.capacity
 *     cdef size_t new_n
 *     if load > table.load_factor:             # <<<<<<<<<<<<<<
 *         new_n = table.n_to_prime + 1
 *         while prime_by_n(new_n) < 2 * table.capacity:
 */
  __pyx_t_1 = ((__pyx_v_load > __pyx_v_table->load_factor) != 0);
  if (__pyx_t_1) {

    /* "gb/collections/table.pyx":104
 *     cdef size_t new_n
 *     if load > table.load_factor:
 *         new_n = table.n_to_prime + 1             # <<<<<<<<<<<<<<
 *         while prime_by_n(new_n) < 2 * table.capacity:
 *             new_n += 1
 */
    __pyx_v_new_n = (__pyx_v_table->n_to_prime + 1);

    /* "gb/collections/table.pyx":105
 *     if load > table.load_factor:
 *         new_n = table.n_to_prime + 1
 *         while prime_by_n(new_n) < 2 * table.capacity:             # <<<<<<<<<<<<<<
 *             new_n += 1
 *         table.n_to_prime = new_n
 */
    while (1) {
      __pyx_t_1 = ((__pyx_f_2gb_11collections_5table_prime_by_n(__pyx_v_new_n) < (2 * __pyx_v_table->capacity)) != 0);
      if (!__pyx_t_1) break;

      /* "gb/collections/table.pyx":106
 *         new_n = table.n_to_prime + 1
 *         while prime_by_n(new_n) < 2 * table.capacity:
 *             new_n += 1             # <<<<<<<<<<<<<<
 *         table.n_to_prime = new_n
 *         rh_resize(table, prime_by_n(new_n))
 */
      __pyx_v_new_n = (__pyx_v_new_n + 1);
    }

    /* "gb/collections/table.pyx":107
 *         while prime_by_n(new_n) < 2 * table.capacity:
 *             new_n += 1
 *         table.n_to_prime = new_n             # <<<<<<<<<<<<<<
 *         rh_resize(table, prime_by_n(new_n))
 * 
 */
    __pyx_v_table->n_to_prime = __pyx_v_new_n;

    /* "gb/collections/table.pyx":108
 *             new_n += 1
 *         table.n_to_prime = new_n
 *         rh_resize(table, prime_by_n(new_n))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_f_2gb_11collections_5table_rh_resize(__pyx_v_table, __pyx_f_2gb_11collections_5table_prime_by_n(__pyx_v_new_n));

    /* "gb/collections/table.pyx":103
 *     cdef double load = (<double>table.inserted) / table.capacity
 *     cdef size_t new_n
 *     if load > table.load_factor:             # <<<<<<<<<<<<<<
 *         new_n = table.n_to_prime + 1
 *         while prime_by_n(new_n) < 2 * table.capacity:
 */
  }

  /* "gb/collections/table.pyx":73
 * 
 * 
 * cdef void rh_set(rh_hash_t *table, size_t key, uint64_t value) nogil:             # <<<<<<<<<<<<<<
 *     cdef size_t kp1 = key + 1
 *     cdef size_t h = so_hash(kp1)
 */

  /* function exit code */
}

/* "gb/collections/table.pyx":111
 * 
 * 
 * cdef uint64_t rh_get(rh_hash_t *table, size_t key) nogil:             # <<<<<<<<<<<<<<
 *     cdef size_t kp1 = key + 1
 *     cdef size_t h = so_hash(kp1)
 */

static uint64_t __pyx_f_2gb_11collections_5table_rh_get(__pyx_t_2gb_11collections_5table_rh_hash_t *__pyx_v_table, size_t __pyx_v_key) {
  size_t __pyx_v_kp1;
  size_t __pyx_v_h;
  size_t __pyx_v_i;
  size_t __pyx_v_loc;
  uint64_t __pyx_r;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  int __pyx_t_3;

  /* "gb/collections/table.pyx":112
 * 
 * cdef uint64_t rh_get(rh_hash_t *table, size_t key) nogil:
 *     cdef size_t kp1 = key + 1             # <<<<<<<<<<<<<<
 *     cdef size_t h = so_hash(kp1)
 *     cdef size_t i = 0
 */
  __pyx_v_kp1 = (__pyx_v_key + 1);

  /* "gb/collections/table.pyx":113
 * cdef uint64_t rh_get(rh_hash_t *table, size_t key) nogil:
 *     cdef size_t kp1 = key + 1
 *     cdef size_t h = so_hash(kp1)             # <<<<<<<<<<<<<<
 *     cdef size_t i = 0
 *     cdef size_t loc
 */
  __pyx_v_h = __pyx_f_2gb_11collections_5table_so_hash(__pyx_v_kp1);

  /* "gb/collections/table.pyx":114
 *     cdef size_t kp1 = key + 1
 *     cdef size_t h = so_hash(kp1)
 *     cdef size_t i = 0             # <<<<<<<<<<<<<<
 *     cdef size_t loc
 *     for i in range(table.inserted):
 */
  __pyx_v_i = 0;

  /* "gb/collections/table.pyx":116
 *     cdef size_t i = 0
 *     cdef size_t loc
 *     for i in range(table.inserted):             # <<<<<<<<<<<<<<
 *         loc = (h + i) % table.capacity
 *         if table.data[loc].key == 0:
 */
  __pyx_t_1 = __pyx_v_table->inserted;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "gb/collections/table.pyx":117
 *     cdef size_t loc
 *     for i in range(table.inserted):
 *         loc = (h + i) % table.capacity             # <<<<<<<<<<<<<<
 *         if table.data[loc].key == 0:
 *             return 0
 */
    __pyx_v_loc = ((__pyx_v_h + __pyx_v_i) % __pyx_v_table->capacity);

    /* "gb/collections/table.pyx":118
 *     for i in range(table.inserted):
 *         loc = (h + i) % table.capacity
 *         if table.data[loc].key == 0:             # <<<<<<<<<<<<<<
 *             return 0
 *         elif table.data[loc].key == kp1:
 */
    __pyx_t_3 = (((__pyx_v_table->data[__pyx_v_loc]).key == 0) != 0);
    if (__pyx_t_3) {

      /* "gb/collections/table.pyx":119
 *         loc = (h + i) % table.capacity
 *         if table.data[loc].key == 0:
 *             return 0             # <<<<<<<<<<<<<<
 *         elif table.data[loc].key == kp1:
 *             return table.data[loc].value
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "gb/collections/table.pyx":118
 *     for i in range(table.inserted):
 *         loc = (h + i) % table.capacity
 *         if table.data[loc].key == 0:             # <<<<<<<<<<<<<<
 *             return 0
 *         elif table.data[loc].key == kp1:
 */
    }

    /* "gb/collections/table.pyx":120
 *         if table.data[loc].key == 0:
 *             return 0
 *         elif table.data[loc].key == kp1:             # <<<<<<<<<<<<<<
 *             return table.data[loc].value
 *     return 0
 */
    __pyx_t_3 = (((__pyx_v_table->data[__pyx_v_loc]).key == __pyx_v_kp1) != 0);
    if (__pyx_t_3) {

      /* "gb/collections/table.pyx":121
 *             return 0
 *         elif table.data[loc].key == kp1:
 *             return table.data[loc].value             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
      __pyx_r = (__pyx_v_table->data[__pyx_v_loc]).value;
      goto __pyx_L0;

      /* "gb/collections/table.pyx":120
 *         if table.data[loc].key == 0:
 *             return 0
 *         elif table.data[loc].key == kp1:             # <<<<<<<<<<<<<<
 *             return table.data[loc].value
 *     return 0
 */
    }
  }

  /* "gb/collections/table.pyx":122
 *         elif table.data[loc].key == kp1:
 *             return table.data[loc].value
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "gb/collections/table.pyx":111
 * 
 * 
 * cdef uint64_t rh_get(rh_hash_t *table, size_t key) nogil:             # <<<<<<<<<<<<<<
 *     cdef size_t kp1 = key + 1
 *     cdef size_t h = so_hash(kp1)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "gb/collections/table.pyx":125
 * 
 * 
 * cdef size_t rh_size(rh_hash_t *table) nogil:             # <<<<<<<<<<<<<<
 *     return table.inserted
 * 
 */

static size_t __pyx_f_2gb_11collections_5table_rh_size(__pyx_t_2gb_11collections_5table_rh_hash_t *__pyx_v_table) {
  size_t __pyx_r;

  /* "gb/collections/table.pyx":126
 * 
 * cdef size_t rh_size(rh_hash_t *table) nogil:
 *     return table.inserted             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_table->inserted;
  goto __pyx_L0;

  /* "gb/collections/table.pyx":125
 * 
 * 
 * cdef size_t rh_size(rh_hash_t *table) nogil:             # <<<<<<<<<<<<<<
 *     return table.inserted
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "gb/collections/table.pyx":131
 * cdef class Table(object):
 * 
 *     def __cinit__(self, size_t n_rows, double load_factor=0.95):             # <<<<<<<<<<<<<<
 *         self.n_rows = n_rows
 *         self.rows = <rh_hash_t *> malloc(n_rows * sizeof(rh_hash_t))
 */

/* Python wrapper */
static int __pyx_pw_2gb_11collections_5table_5Table_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_2gb_11collections_5table_5Table_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_n_rows;
  double __pyx_v_load_factor;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n_rows,&__pyx_n_s_load_factor,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_rows)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_load_factor);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 131, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_n_rows = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_n_rows == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 131, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_load_factor = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_load_factor == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 131, __pyx_L3_error)
    } else {
      __pyx_v_load_factor = ((double)0.95);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 131, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gb.collections.table.Table.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2gb_11collections_5table_5Table___cinit__(((struct __pyx_obj_2gb_11collections_5table_Table *)__pyx_v_self), __pyx_v_n_rows, __pyx_v_load_factor);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2gb_11collections_5table_5Table___cinit__(struct __pyx_obj_2gb_11collections_5table_Table *__pyx_v_self, size_t __pyx_v_n_rows, double __pyx_v_load_factor) {
  size_t __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "gb/collections/table.pyx":132
 * 
 *     def __cinit__(self, size_t n_rows, double load_factor=0.95):
 *         self.n_rows = n_rows             # <<<<<<<<<<<<<<
 *         self.rows = <rh_hash_t *> malloc(n_rows * sizeof(rh_hash_t))
 *         if self.rows == NULL:
 */
  __pyx_v_self->n_rows = __pyx_v_n_rows;

  /* "gb/collections/table.pyx":133
 *     def __cinit__(self, size_t n_rows, double load_factor=0.95):
 *         self.n_rows = n_rows
 *         self.rows = <rh_hash_t *> malloc(n_rows * sizeof(rh_hash_t))             # <<<<<<<<<<<<<<
 *         if self.rows == NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->rows = ((__pyx_t_2gb_11collections_5table_rh_hash_t *)malloc((__pyx_v_n_rows * (sizeof(__pyx_t_2gb_11collections_5table_rh_hash_t)))));

  /* "gb/collections/table.pyx":134
 *         self.n_rows = n_rows
 *         self.rows = <rh_hash_t *> malloc(n_rows * sizeof(rh_hash_t))
 *         if self.rows == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         cdef size_t i
 */
  __pyx_t_1 = ((__pyx_v_self->rows == NULL) != 0);
  if (__pyx_t_1) {

    /* "gb/collections/table.pyx":135
 *         self.rows = <rh_hash_t *> malloc(n_rows * sizeof(rh_hash_t))
 *         if self.rows == NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         cdef size_t i
 *         for i in range(n_rows):
 */
    PyErr_NoMemory(); __PYX_ERR(0, 135, __pyx_L1_error)

    /* "gb/collections/table.pyx":134
 *         self.n_rows = n_rows
 *         self.rows = <rh_hash_t *> malloc(n_rows * sizeof(rh_hash_t))
 *         if self.rows == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         cdef size_t i
 */
  }

  /* "gb/collections/table.pyx":137
 *             raise MemoryError()
 *         cdef size_t i
 *         for i in range(n_rows):             # <<<<<<<<<<<<<<
 *             rh_init(&self.rows[i], load_factor)
 * 
 */
  __pyx_t_2 = __pyx_v_n_rows;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "gb/collections/table.pyx":138
 *         cdef size_t i
 *         for i in range(n_rows):
 *             rh_init(&self.rows[i], load_factor)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_f_2gb_11collections_5table_rh_init((&(__pyx_v_self->rows[__pyx_v_i])), __pyx_v_load_factor);
  }

  /* "gb/collections/table.pyx":131
 * cdef class Table(object):
 * 
 *     def __cinit__(self, size_t n_rows, double load_factor=0.95):             # <<<<<<<<<<<<<<
 *         self.n_rows = n_rows
 *         self.rows = <rh_hash_t *> malloc(n_rows * sizeof(rh_hash_t))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gb.collections.table.Table.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gb/collections/table.pyx":140
 *             rh_init(&self.rows[i], load_factor)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         cdef size_t i
 *         if self.rows != NULL:
 */

/* Python wrapper */
static void __pyx_pw_2gb_11collections_5table_5Table_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_2gb_11collections_5table_5Table_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_2gb_11collections_5table_5Table_2__dealloc__(((struct __pyx_obj_2gb_11collections_5table_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_2gb_11collections_5table_5Table_2__dealloc__(struct __pyx_obj_2gb_11collections_5table_Table *__pyx_v_self) {
  size_t __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "gb/collections/table.pyx":142
 *     def __dealloc__(self):
 *         cdef size_t i
 *         if self.rows != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(self.n_rows):
 *                 if self.rows[i].data != NULL:
 */
  __pyx_t_1 = ((__pyx_v_self->rows != NULL) != 0);
  if (__pyx_t_1) {

    /* "gb/collections/table.pyx":143
 *         cdef size_t i
 *         if self.rows != NULL:
 *             for i in range(self.n_rows):             # <<<<<<<<<<<<<<
 *                 if self.rows[i].data != NULL:
 *                     free(self.rows[i].data)
 */
    __pyx_t_2 = __pyx_v_self->n_rows;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "gb/collections/table.pyx":144
 *         if self.rows != NULL:
 *             for i in range(self.n_rows):
 *                 if self.rows[i].data != NULL:             # <<<<<<<<<<<<<<
 *                     free(self.rows[i].data)
 *             free(self.rows)
 */
      __pyx_t_1 = (((__pyx_v_self->rows[__pyx_v_i]).data != NULL) != 0);
      if (__pyx_t_1) {

        /* "gb/collections/table.pyx":145
 *             for i in range(self.n_rows):
 *                 if self.rows[i].data != NULL:
 *                     free(self.rows[i].data)             # <<<<<<<<<<<<<<
 *             free(self.rows)
 * 
 */
        free((__pyx_v_self->rows[__pyx_v_i]).data);

        /* "gb/collections/table.pyx":144
 *         if self.rows != NULL:
 *             for i in range(self.n_rows):
 *                 if self.rows[i].data != NULL:             # <<<<<<<<<<<<<<
 *                     free(self.rows[i].data)
 *             free(self.rows)
 */
      }
    }

    /* "gb/collections/table.pyx":146
 *                 if self.rows[i].data != NULL:
 *                     free(self.rows[i].data)
 *             free(self.rows)             # <<<<<<<<<<<<<<
 * 
 *     cdef uint64_t get_cell(self, size_t row, size_t col) nogil:
 */
    free(__pyx_v_self->rows);

    /* "gb/collections/table.pyx":142
 *     def __dealloc__(self):
 *         cdef size_t i
 *         if self.rows != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(self.n_rows):
 *                 if self.rows[i].data != NULL:
 */
  }

  /* "gb/collections/table.pyx":140
 *             rh_init(&self.rows[i], load_factor)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         cdef size_t i
 *         if self.rows != NULL:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "gb/collections/table.pyx":148
 *             free(self.rows)
 * 
 *     cdef uint64_t get_cell(self, size_t row, size_t col) nogil:             # <<<<<<<<<<<<<<
 *         return rh_get(&self.rows[row], col)
 * 
 */

static uint64_t __pyx_f_2gb_11collections_5table_5Table_get_cell(struct __pyx_obj_2gb_11collections_5table_Table *__pyx_v_self, size_t __pyx_v_row, size_t __pyx_v_col) {
  uint64_t __pyx_r;

  /* "gb/collections/table.pyx":149
 * 
 *     cdef uint64_t get_cell(self, size_t row, size_t col) nogil:
 *         return rh_get(&self.rows[row], col)             # <<<<<<<<<<<<<<
 * 
 *     def _get_cell(self, size_t row, size_t col):
 */
  __pyx_r = __pyx_f_2gb_11collections_5table_rh_get((&(__pyx_v_self->rows[__pyx_v_row])), __pyx_v_col);
  goto __pyx_L0;

  /* "gb/collections/table.pyx":148
 *             free(self.rows)
 * 
 *     cdef uint64_t get_cell(self, size_t row, size_t col) nogil:             # <<<<<<<<<<<<<<
 *         return rh_get(&self.rows[row], col)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "gb/collections/table.pyx":151
 *         return rh_get(&self.rows[row], col)
 * 
 *     def _get_cell(self, size_t row, size_t col):             # <<<<<<<<<<<<<<
 *         return self.get_cell(row, col)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_2gb_11collections_5table_5Table_5_get_cell(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_2gb_11collections_5table_5Table_5_get_cell(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_row;
  size_t __pyx_v_col;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_cell (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_row,&__pyx_n_s_col,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_row)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_col)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_get_cell", 1, 2, 2, 1); __PYX_ERR(0, 151, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_get_cell") < 0)) __PYX_ERR(0, 151, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_row = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_row == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 151, __pyx_L3_error)
    __pyx_v_col = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_col == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 151, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_get_cell", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 151, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gb.collections.table.Table._get_cell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2gb_11collections_5table_5Table_4_get_cell(((struct __pyx_obj_2gb_11collections_5table_Table *)__pyx_v_self), __pyx_v_row, __pyx_v_col);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2gb_11collections_5table_5Table_4_get_cell(struct __pyx_obj_2gb_11collections_5table_Table *__pyx_v_self, size_t __pyx_v_row, size_t __pyx_v_col) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_get_cell", 0);

  /* "gb/collections/table.pyx":152
 * 
 *     def _get_cell(self, size_t row, size_t col):
 *         return self.get_cell(row, col)             # <<<<<<<<<<<<<<
 * 
 *     cdef void set_cell(self, size_t row, size_t col, uint64_t value) nogil:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(((struct __pyx_vtabstruct_2gb_11collections_5table_Table *)__pyx_v_self->__pyx_vtab)->get_cell(__pyx_v_self, __pyx_v_row, __pyx_v_col)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gb/collections/table.pyx":151
 *         return rh_get(&self.rows[row], col)
 * 
 *     def _get_cell(self, size_t row, size_t col):             # <<<<<<<<<<<<<<
 *         return self.get_cell(row, col)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gb.collections.table.Table._get_cell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gb/collections/table.pyx":154
 *         return self.get_cell(row, col)
 * 
 *     cdef void set_cell(self, size_t row, size_t col, uint64_t value) nogil:             # <<<<<<<<<<<<<<
 *         rh_set(&self.rows[row], col, value)
 * 
 */

static void __pyx_f_2gb_11collections_5table_5Table_set_cell(struct __pyx_obj_2gb_11collections_5table_Table *__pyx_v_self, size_t __pyx_v_row, size_t __pyx_v_col, uint64_t __pyx_v_value) {

  /* "gb/collections/table.pyx":155
 * 
 *     cdef void set_cell(self, size_t row, size_t col, uint64_t value) nogil:
 *         rh_set(&self.rows[row], col, value)             # <<<<<<<<<<<<<<
 * 
 *     def _set_cell(self, size_t row, size_t col, uint64_t value):
 */
  __pyx_f_2gb_11collections_5table_rh_set((&(__pyx_v_self->rows[__pyx_v_row])), __pyx_v_col, __pyx_v_value);

  /* "gb/collections/table.pyx":154
 *         return self.get_cell(row, col)
 * 
 *     cdef void set_cell(self, size_t row, size_t col, uint64_t value) nogil:             # <<<<<<<<<<<<<<
 *         rh_set(&self.rows[row], col, value)
 * 
 */

  /* function exit code */
}

/* "gb/collections/table.pyx":157
 *         rh_set(&self.rows[row], col, value)
 * 
 *     def _set_cell(self, size_t row, size_t col, uint64_t value):             # <<<<<<<<<<<<<<
 *         return self.set_cell(row, col, value)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_2gb_11collections_5table_5Table_7_set_cell(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_2gb_11collections_5table_5Table_7_set_cell(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_row;
  size_t __pyx_v_col;
  uint64_t __pyx_v_value;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_cell (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_row,&__pyx_n_s_col,&__pyx_n_s_value,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_row)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_col)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_set_cell", 1, 3, 3, 1); __PYX_ERR(0, 157, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_set_cell", 1, 3, 3, 2); __PYX_ERR(0, 157, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_set_cell") < 0)) __PYX_ERR(0, 157, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_row = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_row == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 157, __pyx_L3_error)
    __pyx_v_col = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_col == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 157, __pyx_L3_error)
    __pyx_v_value = __Pyx_PyInt_As_uint64_t(values[2]); if (unlikely((__pyx_v_value == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 157, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_set_cell", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 157, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gb.collections.table.Table._set_cell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2gb_11collections_5table_5Table_6_set_cell(((struct __pyx_obj_2gb_11collections_5table_Table *)__pyx_v_self), __pyx_v_row, __pyx_v_col, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2gb_11collections_5table_5Table_6_set_cell(struct __pyx_obj_2gb_11collections_5table_Table *__pyx_v_self, size_t __pyx_v_row, size_t __pyx_v_col, uint64_t __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_set_cell", 0);

  /* "gb/collections/table.pyx":158
 * 
 *     def _set_cell(self, size_t row, size_t col, uint64_t value):
 *         return self.set_cell(row, col, value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(((struct __pyx_vtabstruct_2gb_11collections_5table_Table *)__pyx_v_self->__pyx_vtab)->set_cell(__pyx_v_self, __pyx_v_row, __pyx_v_col, __pyx_v_value)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gb/collections/table.pyx":157
 *         rh_set(&self.rows[row], col, value)
 * 
 *     def _set_cell(self, size_t row, size_t col, uint64_t value):             # <<<<<<<<<<<<<<
 *         return self.set_cell(row, col, value)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gb.collections.table.Table._set_cell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_2gb_11collections_5table_5Table_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_2gb_11collections_5table_5Table_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_2gb_11collections_5table_5Table_8__reduce_cython__(((struct __pyx_obj_2gb_11collections_5table_Table *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2gb_11collections_5table_5Table_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_2gb_11collections_5table_Table *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gb.collections.table.Table.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_2gb_11collections_5table_5Table_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_2gb_11collections_5table_5Table_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_2gb_11collections_5table_5Table_10__setstate_cython__(((struct __pyx_obj_2gb_11collections_5table_Table *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2gb_11collections_5table_5Table_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_2gb_11collections_5table_Table *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gb.collections.table.Table.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gb/collections/table.pyx":163
 * cdef class RobinHoodHash(object):
 * 
 *     def __cinit__(self, double load_factor=0.95):             # <<<<<<<<<<<<<<
 *         self.table = <rh_hash_t *> malloc(sizeof(rh_hash_t))
 *         if self.table == NULL:
 */

/* Python wrapper */
static int __pyx_pw_2gb_11collections_5table_13RobinHoodHash_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_2gb_11collections_5table_13RobinHoodHash_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_load_factor;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_load_factor,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_load_factor);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 163, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_load_factor = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_load_factor == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 163, __pyx_L3_error)
    } else {
      __pyx_v_load_factor = ((double)0.95);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 163, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gb.collections.table.RobinHoodHash.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2gb_11collections_5table_13RobinHoodHash___cinit__(((struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *)__pyx_v_self), __pyx_v_load_factor);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2gb_11collections_5table_13RobinHoodHash___cinit__(struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *__pyx_v_self, double __pyx_v_load_factor) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "gb/collections/table.pyx":164
 * 
 *     def __cinit__(self, double load_factor=0.95):
 *         self.table = <rh_hash_t *> malloc(sizeof(rh_hash_t))             # <<<<<<<<<<<<<<
 *         if self.table == NULL:
 *             raise MemoryError('Robin Hash out of mem')
 */
  __pyx_v_self->table = ((__pyx_t_2gb_11collections_5table_rh_hash_t *)malloc((sizeof(__pyx_t_2gb_11collections_5table_rh_hash_t))));

  /* "gb/collections/table.pyx":165
 *     def __cinit__(self, double load_factor=0.95):
 *         self.table = <rh_hash_t *> malloc(sizeof(rh_hash_t))
 *         if self.table == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError('Robin Hash out of mem')
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->table == NULL) != 0);
  if (__pyx_t_1) {

    /* "gb/collections/table.pyx":166
 *         self.table = <rh_hash_t *> malloc(sizeof(rh_hash_t))
 *         if self.table == NULL:
 *             raise MemoryError('Robin Hash out of mem')             # <<<<<<<<<<<<<<
 * 
 *         rh_init(self.table, load_factor)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 166, __pyx_L1_error)

    /* "gb/collections/table.pyx":165
 *     def __cinit__(self, double load_factor=0.95):
 *         self.table = <rh_hash_t *> malloc(sizeof(rh_hash_t))
 *         if self.table == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError('Robin Hash out of mem')
 * 
 */
  }

  /* "gb/collections/table.pyx":168
 *             raise MemoryError('Robin Hash out of mem')
 * 
 *         rh_init(self.table, load_factor)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_f_2gb_11collections_5table_rh_init(__pyx_v_self->table, __pyx_v_load_factor);

  /* "gb/collections/table.pyx":163
 * cdef class RobinHoodHash(object):
 * 
 *     def __cinit__(self, double load_factor=0.95):             # <<<<<<<<<<<<<<
 *         self.table = <rh_hash_t *> malloc(sizeof(rh_hash_t))
 *         if self.table == NULL:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gb.collections.table.RobinHoodHash.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gb/collections/table.pyx":170
 *         rh_init(self.table, load_factor)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.table != NULL:
 *             if self.table.data != NULL:
 */

/* Python wrapper */
static void __pyx_pw_2gb_11collections_5table_13RobinHoodHash_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_2gb_11collections_5table_13RobinHoodHash_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_2gb_11collections_5table_13RobinHoodHash_2__dealloc__(((struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_2gb_11collections_5table_13RobinHoodHash_2__dealloc__(struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "gb/collections/table.pyx":171
 * 
 *     def __dealloc__(self):
 *         if self.table != NULL:             # <<<<<<<<<<<<<<
 *             if self.table.data != NULL:
 *                 free(self.table.data)
 */
  __pyx_t_1 = ((__pyx_v_self->table != NULL) != 0);
  if (__pyx_t_1) {

    /* "gb/collections/table.pyx":172
 *     def __dealloc__(self):
 *         if self.table != NULL:
 *             if self.table.data != NULL:             # <<<<<<<<<<<<<<
 *                 free(self.table.data)
 *             free(self.table)
 */
    __pyx_t_1 = ((__pyx_v_self->table->data != NULL) != 0);
    if (__pyx_t_1) {

      /* "gb/collections/table.pyx":173
 *         if self.table != NULL:
 *             if self.table.data != NULL:
 *                 free(self.table.data)             # <<<<<<<<<<<<<<
 *             free(self.table)
 * 
 */
      free(__pyx_v_self->table->data);

      /* "gb/collections/table.pyx":172
 *     def __dealloc__(self):
 *         if self.table != NULL:
 *             if self.table.data != NULL:             # <<<<<<<<<<<<<<
 *                 free(self.table.data)
 *             free(self.table)
 */
    }

    /* "gb/collections/table.pyx":174
 *             if self.table.data != NULL:
 *                 free(self.table.data)
 *             free(self.table)             # <<<<<<<<<<<<<<
 * 
 *     cdef void set(self, size_t key, uint64_t value) nogil:
 */
    free(__pyx_v_self->table);

    /* "gb/collections/table.pyx":171
 * 
 *     def __dealloc__(self):
 *         if self.table != NULL:             # <<<<<<<<<<<<<<
 *             if self.table.data != NULL:
 *                 free(self.table.data)
 */
  }

  /* "gb/collections/table.pyx":170
 *         rh_init(self.table, load_factor)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.table != NULL:
 *             if self.table.data != NULL:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "gb/collections/table.pyx":176
 *             free(self.table)
 * 
 *     cdef void set(self, size_t key, uint64_t value) nogil:             # <<<<<<<<<<<<<<
 *         rh_set(self.table, key, value)
 * 
 */

static void __pyx_f_2gb_11collections_5table_13RobinHoodHash_set(struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *__pyx_v_self, size_t __pyx_v_key, uint64_t __pyx_v_value) {

  /* "gb/collections/table.pyx":177
 * 
 *     cdef void set(self, size_t key, uint64_t value) nogil:
 *         rh_set(self.table, key, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef uint64_t get(self, size_t key) nogil:
 */
  __pyx_f_2gb_11collections_5table_rh_set(__pyx_v_self->table, __pyx_v_key, __pyx_v_value);

  /* "gb/collections/table.pyx":176
 *             free(self.table)
 * 
 *     cdef void set(self, size_t key, uint64_t value) nogil:             # <<<<<<<<<<<<<<
 *         rh_set(self.table, key, value)
 * 
 */

  /* function exit code */
}

/* "gb/collections/table.pyx":179
 *         rh_set(self.table, key, value)
 * 
 *     cdef uint64_t get(self, size_t key) nogil:             # <<<<<<<<<<<<<<
 *         return rh_get(self.table, key)
 * 
 */

static uint64_t __pyx_f_2gb_11collections_5table_13RobinHoodHash_get(struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *__pyx_v_self, size_t __pyx_v_key) {
  uint64_t __pyx_r;

  /* "gb/collections/table.pyx":180
 * 
 *     cdef uint64_t get(self, size_t key) nogil:
 *         return rh_get(self.table, key)             # <<<<<<<<<<<<<<
 * 
 *     def _get(self, size_t key):
 */
  __pyx_r = __pyx_f_2gb_11collections_5table_rh_get(__pyx_v_self->table, __pyx_v_key);
  goto __pyx_L0;

  /* "gb/collections/table.pyx":179
 *         rh_set(self.table, key, value)
 * 
 *     cdef uint64_t get(self, size_t key) nogil:             # <<<<<<<<<<<<<<
 *         return rh_get(self.table, key)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "gb/collections/table.pyx":182
 *         return rh_get(self.table, key)
 * 
 *     def _get(self, size_t key):             # <<<<<<<<<<<<<<
 *         return self.get(key)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_2gb_11collections_5table_13RobinHoodHash_5_get(PyObject *__pyx_v_self, PyObject *__pyx_arg_key); /*proto*/
static PyObject *__pyx_pw_2gb_11collections_5table_13RobinHoodHash_5_get(PyObject *__pyx_v_self, PyObject *__pyx_arg_key) {
  size_t __pyx_v_key;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get (wrapper)", 0);
  assert(__pyx_arg_key); {
    __pyx_v_key = __Pyx_PyInt_As_size_t(__pyx_arg_key); if (unlikely((__pyx_v_key == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 182, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("gb.collections.table.RobinHoodHash._get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2gb_11collections_5table_13RobinHoodHash_4_get(((struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *)__pyx_v_self), ((size_t)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2gb_11collections_5table_13RobinHoodHash_4_get(struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *__pyx_v_self, size_t __pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_get", 0);

  /* "gb/collections/table.pyx":183
 * 
 *     def _get(self, size_t key):
 *         return self.get(key)             # <<<<<<<<<<<<<<
 * 
 *     def _set(self, size_t key, size_t value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint64_t(((struct __pyx_vtabstruct_2gb_11collections_5table_RobinHoodHash *)__pyx_v_self->__pyx_vtab)->get(__pyx_v_self, __pyx_v_key)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gb/collections/table.pyx":182
 *         return rh_get(self.table, key)
 * 
 *     def _get(self, size_t key):             # <<<<<<<<<<<<<<
 *         return self.get(key)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gb.collections.table.RobinHoodHash._get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gb/collections/table.pyx":185
 *         return self.get(key)
 * 
 *     def _set(self, size_t key, size_t value):             # <<<<<<<<<<<<<<
 *         self.set(key, value)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_2gb_11collections_5table_13RobinHoodHash_7_set(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_2gb_11collections_5table_13RobinHoodHash_7_set(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_key;
  size_t __pyx_v_value;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_set", 1, 2, 2, 1); __PYX_ERR(0, 185, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_set") < 0)) __PYX_ERR(0, 185, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_key = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_key == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 185, __pyx_L3_error)
    __pyx_v_value = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_value == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 185, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_set", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 185, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gb.collections.table.RobinHoodHash._set", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2gb_11collections_5table_13RobinHoodHash_6_set(((struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *)__pyx_v_self), __pyx_v_key, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2gb_11collections_5table_13RobinHoodHash_6_set(struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *__pyx_v_self, size_t __pyx_v_key, size_t __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set", 0);

  /* "gb/collections/table.pyx":186
 * 
 *     def _set(self, size_t key, size_t value):
 *         self.set(key, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef size_t size(self) nogil:
 */
  ((struct __pyx_vtabstruct_2gb_11collections_5table_RobinHoodHash *)__pyx_v_self->__pyx_vtab)->set(__pyx_v_self, __pyx_v_key, __pyx_v_value);

  /* "gb/collections/table.pyx":185
 *         return self.get(key)
 * 
 *     def _set(self, size_t key, size_t value):             # <<<<<<<<<<<<<<
 *         self.set(key, value)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gb/collections/table.pyx":188
 *         self.set(key, value)
 * 
 *     cdef size_t size(self) nogil:             # <<<<<<<<<<<<<<
 *         return rh_size(self.table)
 * 
 */

static size_t __pyx_f_2gb_11collections_5table_13RobinHoodHash_size(struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *__pyx_v_self) {
  size_t __pyx_r;

  /* "gb/collections/table.pyx":189
 * 
 *     cdef size_t size(self) nogil:
 *         return rh_size(self.table)             # <<<<<<<<<<<<<<
 * 
 *     def _size(self):
 */
  __pyx_r = __pyx_f_2gb_11collections_5table_rh_size(__pyx_v_self->table);
  goto __pyx_L0;

  /* "gb/collections/table.pyx":188
 *         self.set(key, value)
 * 
 *     cdef size_t size(self) nogil:             # <<<<<<<<<<<<<<
 *         return rh_size(self.table)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "gb/collections/table.pyx":191
 *         return rh_size(self.table)
 * 
 *     def _size(self):             # <<<<<<<<<<<<<<
 *         return self.size()
 */

/* Python wrapper */
static PyObject *__pyx_pw_2gb_11collections_5table_13RobinHoodHash_9_size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_2gb_11collections_5table_13RobinHoodHash_9_size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_size (wrapper)", 0);
  __pyx_r = __pyx_pf_2gb_11collections_5table_13RobinHoodHash_8_size(((struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2gb_11collections_5table_13RobinHoodHash_8_size(struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_size", 0);

  /* "gb/collections/table.pyx":192
 * 
 *     def _size(self):
 *         return self.size()             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(((struct __pyx_vtabstruct_2gb_11collections_5table_RobinHoodHash *)__pyx_v_self->__pyx_vtab)->size(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gb/collections/table.pyx":191
 *         return rh_size(self.table)
 * 
 *     def _size(self):             # <<<<<<<<<<<<<<
 *         return self.size()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gb.collections.table.RobinHoodHash._size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_2gb_11collections_5table_13RobinHoodHash_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_2gb_11collections_5table_13RobinHoodHash_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_2gb_11collections_5table_13RobinHoodHash_10__reduce_cython__(((struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2gb_11collections_5table_13RobinHoodHash_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gb.collections.table.RobinHoodHash.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_2gb_11collections_5table_13RobinHoodHash_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_2gb_11collections_5table_13RobinHoodHash_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_2gb_11collections_5table_13RobinHoodHash_12__setstate_cython__(((struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2gb_11collections_5table_13RobinHoodHash_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gb.collections.table.RobinHoodHash.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_2gb_11collections_5table_Table __pyx_vtable_2gb_11collections_5table_Table;

static PyObject *__pyx_tp_new_2gb_11collections_5table_Table(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_2gb_11collections_5table_Table *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_2gb_11collections_5table_Table *)o);
  p->__pyx_vtab = __pyx_vtabptr_2gb_11collections_5table_Table;
  if (unlikely(__pyx_pw_2gb_11collections_5table_5Table_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_2gb_11collections_5table_Table(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_2gb_11collections_5table_5Table_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_2gb_11collections_5table_Table[] = {
  {"_get_cell", (PyCFunction)__pyx_pw_2gb_11collections_5table_5Table_5_get_cell, METH_VARARGS|METH_KEYWORDS, 0},
  {"_set_cell", (PyCFunction)__pyx_pw_2gb_11collections_5table_5Table_7_set_cell, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_2gb_11collections_5table_5Table_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_2gb_11collections_5table_5Table_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_2gb_11collections_5table_Table = {
  PyVarObject_HEAD_INIT(0, 0)
  "gb.collections.table.Table", /*tp_name*/
  sizeof(struct __pyx_obj_2gb_11collections_5table_Table), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_2gb_11collections_5table_Table, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_2gb_11collections_5table_Table, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_2gb_11collections_5table_Table, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_2gb_11collections_5table_RobinHoodHash __pyx_vtable_2gb_11collections_5table_RobinHoodHash;

static PyObject *__pyx_tp_new_2gb_11collections_5table_RobinHoodHash(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *)o);
  p->__pyx_vtab = __pyx_vtabptr_2gb_11collections_5table_RobinHoodHash;
  if (unlikely(__pyx_pw_2gb_11collections_5table_13RobinHoodHash_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_2gb_11collections_5table_RobinHoodHash(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_2gb_11collections_5table_13RobinHoodHash_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_2gb_11collections_5table_RobinHoodHash[] = {
  {"_get", (PyCFunction)__pyx_pw_2gb_11collections_5table_13RobinHoodHash_5_get, METH_O, 0},
  {"_set", (PyCFunction)__pyx_pw_2gb_11collections_5table_13RobinHoodHash_7_set, METH_VARARGS|METH_KEYWORDS, 0},
  {"_size", (PyCFunction)__pyx_pw_2gb_11collections_5table_13RobinHoodHash_9_size, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_2gb_11collections_5table_13RobinHoodHash_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_2gb_11collections_5table_13RobinHoodHash_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_2gb_11collections_5table_RobinHoodHash = {
  PyVarObject_HEAD_INIT(0, 0)
  "gb.collections.table.RobinHoodHash", /*tp_name*/
  sizeof(struct __pyx_obj_2gb_11collections_5table_RobinHoodHash), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_2gb_11collections_5table_RobinHoodHash, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_2gb_11collections_5table_RobinHoodHash, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_2gb_11collections_5table_RobinHoodHash, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "table",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_s_Robin_Hash_out_of_mem, __pyx_k_Robin_Hash_out_of_mem, sizeof(__pyx_k_Robin_Hash_out_of_mem), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_col, __pyx_k_col, sizeof(__pyx_k_col), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_load_factor, __pyx_k_load_factor, sizeof(__pyx_k_load_factor), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_n_rows, __pyx_k_n_rows, sizeof(__pyx_k_n_rows), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_row, __pyx_k_row, sizeof(__pyx_k_row), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 57, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 135, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "gb/collections/table.pyx":166
 *         self.table = <rh_hash_t *> malloc(sizeof(rh_hash_t))
 *         if self.table == NULL:
 *             raise MemoryError('Robin Hash out of mem')             # <<<<<<<<<<<<<<
 * 
 *         rh_init(self.table, load_factor)
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_Robin_Hash_out_of_mem); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC inittable(void); /*proto*/
PyMODINIT_FUNC inittable(void)
#else
PyMODINIT_FUNC PyInit_table(void); /*proto*/
PyMODINIT_FUNC PyInit_table(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_table(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("table", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_gb__collections__table) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "gb.collections.table")) {
      if (unlikely(PyDict_SetItemString(modules, "gb.collections.table", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_2gb_11collections_5table_Table = &__pyx_vtable_2gb_11collections_5table_Table;
  __pyx_vtable_2gb_11collections_5table_Table.set_cell = (void (*)(struct __pyx_obj_2gb_11collections_5table_Table *, size_t, size_t, uint64_t))__pyx_f_2gb_11collections_5table_5Table_set_cell;
  __pyx_vtable_2gb_11collections_5table_Table.get_cell = (uint64_t (*)(struct __pyx_obj_2gb_11collections_5table_Table *, size_t, size_t))__pyx_f_2gb_11collections_5table_5Table_get_cell;
  if (PyType_Ready(&__pyx_type_2gb_11collections_5table_Table) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __pyx_type_2gb_11collections_5table_Table.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_2gb_11collections_5table_Table.tp_dict, __pyx_vtabptr_2gb_11collections_5table_Table) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Table", (PyObject *)&__pyx_type_2gb_11collections_5table_Table) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_2gb_11collections_5table_Table) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __pyx_ptype_2gb_11collections_5table_Table = &__pyx_type_2gb_11collections_5table_Table;
  __pyx_vtabptr_2gb_11collections_5table_RobinHoodHash = &__pyx_vtable_2gb_11collections_5table_RobinHoodHash;
  __pyx_vtable_2gb_11collections_5table_RobinHoodHash.set = (void (*)(struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *, size_t, uint64_t))__pyx_f_2gb_11collections_5table_13RobinHoodHash_set;
  __pyx_vtable_2gb_11collections_5table_RobinHoodHash.get = (uint64_t (*)(struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *, size_t))__pyx_f_2gb_11collections_5table_13RobinHoodHash_get;
  __pyx_vtable_2gb_11collections_5table_RobinHoodHash.size = (size_t (*)(struct __pyx_obj_2gb_11collections_5table_RobinHoodHash *))__pyx_f_2gb_11collections_5table_13RobinHoodHash_size;
  if (PyType_Ready(&__pyx_type_2gb_11collections_5table_RobinHoodHash) < 0) __PYX_ERR(0, 161, __pyx_L1_error)
  __pyx_type_2gb_11collections_5table_RobinHoodHash.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_2gb_11collections_5table_RobinHoodHash.tp_dict, __pyx_vtabptr_2gb_11collections_5table_RobinHoodHash) < 0) __PYX_ERR(0, 161, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "RobinHoodHash", (PyObject *)&__pyx_type_2gb_11collections_5table_RobinHoodHash) < 0) __PYX_ERR(0, 161, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_2gb_11collections_5table_RobinHoodHash) < 0) __PYX_ERR(0, 161, __pyx_L1_error)
  __pyx_ptype_2gb_11collections_5table_RobinHoodHash = &__pyx_type_2gb_11collections_5table_RobinHoodHash;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "gb/collections/table.pyx":1
 * # -*- coding: utf8             # <<<<<<<<<<<<<<
 * # cython: boundscheck=False
 * # cython: cdivision=True
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init gb.collections.table", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init gb.collections.table");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* SetVTable */
  static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* SetupReduce */
  static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_COMPILING_IN_CPYTHON
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* CLineInTraceback */
  static int __Pyx_CLineForTraceback(int c_line) {
#ifdef CYTHON_CLINE_IN_TRACEBACK
    return ((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0;
#else
    PyObject *use_cline;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = PyDict_GetItem(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *ptype, *pvalue, *ptraceback;
      PyObject *use_cline_obj;
      PyErr_Fetch(&ptype, &pvalue, &ptraceback);
      use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        use_cline = NULL;
      }
      PyErr_Restore(ptype, pvalue, ptraceback);
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    return c_line;
#endif
}

/* CodeObjectCache */
  static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value) {
    const uint64_t neg_one = (uint64_t) -1, const_zero = (uint64_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint64_t),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *x) {
    const uint64_t neg_one = (uint64_t) -1, const_zero = (uint64_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint64_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint64_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 2 * PyLong_SHIFT) {
                            return (uint64_t) (((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 3 * PyLong_SHIFT) {
                            return (uint64_t) (((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 4 * PyLong_SHIFT) {
                            return (uint64_t) (((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint64_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint64_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(uint64_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint64_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint64_t) ((((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint64_t) ((((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint64_t) ((((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint64_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint64_t) -1;
        }
    } else {
        uint64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint64_t) -1;
        val = __Pyx_PyInt_As_uint64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint64_t");
    return (uint64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint64_t");
    return (uint64_t) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            PyErr_Clear();
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
